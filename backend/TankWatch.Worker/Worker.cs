using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.AspNetCore.SignalR;
using TankWatch.Api; // for TelemetryHub and TankContext
using TankWatch.Domain; // for Tank and TankTelemetry
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
 using System.Text.Json; 

namespace TankWatch.Worker
{
    public class Worker : BackgroundService
    {
        private readonly IServiceProvider _services;
        private readonly IHubContext<TelemetryHub> _hub;

        public Worker(IServiceProvider services, IHubContext<TelemetryHub> hub)
        {
            _services = services;
            _hub = hub;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                try
                {
                    using var scope = _services.CreateScope();
                    var ctx = scope.ServiceProvider.GetRequiredService<TankContext>();
                    var tanks = ctx.Tanks.ToArray();
                    if (tanks.Any())
                    {
                        var rnd = Random.Shared;
                        var chosenTank = tanks[rnd.Next(tanks.Length)];
                        var newTelemetry = new TankTelemetry
                        {
                            Id = 0, // Auto-generated by database
                            Timestamp = DateTime.UtcNow,
                            Level = rnd.NextDouble() * 100,
                            Temperature = 20 + rnd.NextDouble() * 50,
                            Radiation = rnd.NextDouble() * 5,
                            Pressure = 10 + rnd.NextDouble() * 10,
                            TankId = chosenTank.Id
                            // Do not set Tank to avoid serialization issues
                        };

                        ctx.Telemetry.Add(newTelemetry);
                        await ctx.SaveChangesAsync(stoppingToken);
                        Console.WriteLine($"Added telemetry at {newTelemetry.Timestamp}");

                        // Create DTO for SignalR with tankName
                        var telemetryToSend = new
                        {
                            Id = newTelemetry.Id,
                            Timestamp = newTelemetry.Timestamp,
                            Level = newTelemetry.Level,
                            Temperature = newTelemetry.Temperature,
                            Radiation = newTelemetry.Radiation,
                            Pressure = newTelemetry.Pressure,
                            TankId = newTelemetry.TankId,
                            TankName = chosenTank.Name // Matches frontend's Telemetry interface
                        };

                        Console.WriteLine($"Preparing to send telemetry: {JsonSerializer.Serialize(telemetryToSend)}");
                        await _hub.Clients.All.SendAsync("ReceiveTelemetry", telemetryToSend, stoppingToken);
                        Console.WriteLine($"Sent telemetry via SignalR: {JsonSerializer.Serialize(telemetryToSend)}");
                    }
                    else
                    {
                        Console.WriteLine("No tanks found in database.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error adding telemetry: {ex.Message}\nStackTrace: {ex.StackTrace}");
                }

                await Task.Delay(TimeSpan.FromSeconds(5), stoppingToken);
            }
        }
    }
}
